{
  "name": "Zlx cache",
  "tagline": "Classe para ajudar na utilização de Cache em sites",
  "body": "# ZLX Cache\r\n===============\r\nZLX Cache v1.0.0 - 11 de Janeiro de 2016\r\nZLX Cache v1.1.0 - 16 de Setembro de 2016\r\n\r\npor Alexandre de Freitas Caetano\r\nhttp://github.com/aledefreitas/\r\n\r\nbaseado em CakePHP Cache\r\nhttp://github.com/cakephp/cakephp/\r\n\r\n\r\n### Introdução\r\n---------\r\nA classe ZLX\\Cache traz uma forma elegante de utilizar cache na aplicação, facilitando a implementação de sistemas de Cache em sua aplicação.\r\nCom esta classe é possível criar várias instâncias separadas de Cache para sua aplicação, sem forçar que sua aplicação se restrinja a apenas uma implementação de cache.\r\nVocê poderá alterar ou criar engines de cache com sua própria lógica, sobre-escrevendo a classe CacheEngine.\r\nTambém pode apagar dados de várias instâncias de uma só vez, através dos namespaces atribuídos às instâncias!\r\n\r\n\r\n### Instalação\r\n--------- \r\nÉ possível instalar o ZLX\\Cache através do Composer. Adicione no seu ```composer.json```:\r\n```\r\n{\r\n   \"repositories\": [\r\n       {\r\n           \"url\": \"https://github.com/aledefreitas/zlx_cache.git\",\r\n           \"type\": \"git\"\r\n       }\r\n   ],\r\n   \"require\": {\r\n       \"aledefreitas/zlx_cache\": \"*\"\r\n   }\r\n}\r\n```\r\n\r\nOu então você pode baixar a release que quiser no [nosso repositório](https://github.com/aledefreitas/zlx_cache/releases), e fazer um require no inicio de seu código:\r\n```php\r\n\t\trequire_once(\"path/to/zlx/cache/Cache.php\");\r\n```\r\n\r\n### Requerimentos\r\n---------\r\n - ***PHP 5.6+***\r\n - ***Memcached***\r\n\r\n### Modo de uso\r\n---------\r\nAbaixo citaremos as funções que são utilizadas no gerenciamento do cache na sua aplicação.\r\nPrimeiramente, iniciamos o Cache, no início de seu código de inicialização da aplicação:\r\n```php\r\n \tuse ZLX\\Cache\\Cache;\r\n\t$config = [ 'prefix' => 'cache_prefix',\r\n\t\t\t\t'instances' => [\r\n\t\t\t\t\t// Utilizamos default, pois é a configuração padrão do cache\r\n\t\t\t\t\t'default' => [\t'engine' => 'memcached',\r\n\t\t\t\t\t\t\t\t\t'duration' => '+10 minutes',\r\n\t\t\t\t\t\t\t\t\t'groups' => [ 'Posts', 'Comments', 'Session' ],\r\n\t\t\t\t\t\t\t\t\t'prevent_clear' => [ 'Session' ] ]\r\n\t\t\t\t]\r\n\t\t\t];\r\n\t// Iniciamos o cache\r\n \tCache::init($config);\r\n```\r\n#### Atenção!\r\nTenha muita atenção ao setar a configuração 'prefix' na inicialização do Cache. Ela é o prefixo para as entradas de cache de seu site,\r\ne não deve ser duplicada com nenhum outro prefixo igual em qualquer outro site no servidor inteiro.\r\n\r\n#### Criando instâncias on-the-fly (em tempo de execução)\r\nPodemos criar instancias novas programáticamente em tempo de execução com a função ```Cache::create()```:\r\n```php\r\n \tuse ZLX\\Cache\\Cache;\r\n\t$config = [\t'engine' => 'memcached',\r\n\t\t\t\t'duration' => '+10 minutes',\r\n\t\t\t\t'groups' => [ 'Posts', 'Comments', 'Session' ],\r\n\t\t\t\t'prevent_clear' => [ 'Session' ] \r\n\t\t\t];\r\n\t\t\t\r\n \tCache::create('meu_cache', $config);\r\n```\r\n#### Atributos das instâncias:\r\n- 'engine': É o Engine a ser utilizado. Ex.: 'memcached'\r\n- 'duration': Duração das chaves de cache. Ex.: '+40 minutes'\r\n- 'prefix': Prefixo da instância. Ex.: 'prefixo_zlx'\r\n- 'namespaces': Array contendo os namespaces ao qual a instância pertence. Ex.: [ 'Posts', 'Admin' ]\r\n- 'groups': Array contendo os grupos da instância. Ex.: [ 'Comments', 'Session', 'Users' ]\r\n- 'prevent_clear': Array contendo os grupos que são ignorados quando o método clear(false)\r\n\r\nApós inicializado, poderemos utilizar todas suas funcionalidades:\r\n#### Atenção!\r\nTodas as funções tem como padrão a instância 'default'. Caso seja omitido este parâmetro, a instância utilizada será a 'default'. Você pode\r\nespecificar o parametro para utilizar outra instância.\r\n\r\n#### set(key, value [, instance = 'default')\r\nSalva uma chave e seu valor no cache. Retorna ```(boolean)``` com true quando foi salvo com sucesso, e false quando não foi salvo com sucesso.\r\n```php\r\n\t\tCache::set('chave', 'teste de valor', 'default');\r\n```\r\n\r\n#### get(key [, instance = 'default')\r\nRetorna o valor de uma chave do cache. Retorna ```(boolean) false``` caso não seja encontrado nada.\r\n```php\r\n\t\tCache::get('chave', 'default');\r\n```\r\n\r\n#### delete(key [, instance = 'default')\r\nApaga o valor de uma chave do cache. Retorna ```(boolean)``` com true caso delete, e false caso não delete.\r\n```php\r\n\t\tCache::delete('chave', 'default');\r\n```\r\n\r\n#### remember(key, callable [, instance = 'default')\r\nPesquisa o valor da chave requisitado, caso o mesmo não exista, executa a função ```callable``` e salva na chave requisitada (e retorna) seu retorno.\r\n```php\r\n\t\tCache::remember('chave', function() {\r\n \t\t// Inclua sua lógica aqui\r\n \t\treturn $retorno;\r\n\t\t}, 'default');\r\n```\r\n\r\n#### clearGroup(group [, instance = 'default')\r\nInvalida todas as chaves de um grupo determinado na instancia escolhida\r\n```php\r\n\t\tCache::clearGroup('Grupo', 'default');\r\n```\r\n\r\n#### clear([ ignore_prevents = false [, instance = 'default')\r\nApaga todas as entradas de cache da instancia. Caso ignore_prevents seja setado como ```true```, ignorará até os grupos em 'prevent_clear'.\r\n```php\r\n\t\tCache::clear(false, 'default');\r\n```\r\n\r\n#### clearNamespace(namespace)\r\nInvoca o método clear() de todas as instâncias sob o namespace escolhido\r\n```php\r\n\t\tCache::clearNamespace('Namespace');\r\n```\r\n\r\n### Funcionamento dos Grupos de Cache\r\n---------\r\nA funcionalidade de grupos de Cache no ZLX\\Cache é interessante para invalidar/resetar apenas entradas de cache em um grupo específico.\r\nSuponhamos que em determinado momento da sua lógica, você cria uma entrada de Cache sob o grupo 'Posts', para guardar os dados de uma postagem\r\nespecífica:\r\n```php\r\n\t\tCache::set(\"Posts.data.\".$id_post, [ \"title\" => \"Meus dados do post\", \"body\" => \"Corpo do meu post\" ]);\r\n```\r\nAo utilizar o padrão 'Grupo.chave' para salvar, deletar, ou retornar uma chave (***set()***,**get()***,**delete()***,**remember()***), caso\r\no grupo esteja no array de grupos da sua instância, ele será salvo sob este grupo.\r\n\r\nAo invocar o método**clearGroup()***, invalidamos todas as chaves sob este grupo, de forma que na próxima requisição de qualquer chave deste\r\ngrupo, ela não será encontrada no cache, e portanto será renovada!\r\n\r\n### Funcionamento dos Namespaces\r\n---------\r\nÉ muito parecido com o funcionamento de grupos, porém funciona num escopo acima dos grupos. Os grupos pertencem à instancia, e as instâncias pertencem aos \r\nnamespaces. \r\nQuando o método**clearNamespace()*** for invocado, ele irá executar um clear (***ignorando os prevents***) em todas as instâncias pertencentes ao\r\nnamespace a ser resetado.\r\n\r\n### Criando e utilizando uma Engine personalizada\r\n---------\r\nO ZLX\\Cache permite que sejam criadas Engines personalizadas para que possa-se desenvolver as lógicas necessárias do programador\r\natravés de abstração da classe ZLX\\Cache\\CacheEngine!\r\n\r\nAbaixo segue o exemplo de uma classe personalizada:\r\n```php\r\nuse ZLX\\Cache\\CacheEngine;\r\n\r\n\tclass CustomCacheEngine extends CacheEngine {\r\n\tpublic $_defaultConfigs; // Configurações padrões\r\n\t\t \r\n\tpublic function __construct(array $config) {\r\n\t\t// Lógica do método construtor\r\n\r\n\t\t$this->_configs = array_merge($this->_defaultConfigs, $config); // Merge das configurações padrões. É necessário caso haja configurações padrões.\r\n\t\tparent::__construct($config);\t\r\n\t}\r\n\t\r\n\tpublic function set($key, $value, $custom_ttl = false) {\r\n\t\t// Lógica de salvamento de valores no cache\t\r\n\t}\r\n\t\r\n\tpublic function get($key) {\r\n\t\t// Lógica de busca de valores no cache\t\r\n\t}\r\n\t\r\n\tpublic function delete($key) {\r\n\t\t// Lógica de apagamento de valor no cache\t\r\n\t}\r\n\t\r\n\tpublic function clear($ignore_prevents) {\r\n\t\t// Lógica para reset do cache\t\r\n\t}\r\n\t\r\n\tpublic function add($key, $value, $ttl = 3) {\r\n\t\t// Lógica para add no cache\r\n\t}\r\n}\r\n```\r\n\r\nEntão, será possível adicionar instâncias desta classe de duas maneiras diferentes:\r\n```php\r\n\t// Através da inicialização do Cache\r\n \tuse ZLX\\Cache\\Cache;\r\n\t$config = [ 'prefix' => 'cache_prefix',\r\n\t\t\t\t'instances' => [\r\n\t\t\t\t\t'meu_cache' => [\t'engine' => 'CustomCacheEngine',\r\n\t\t\t\t\t\t\t\t\t\t'duration' => '+10 minutes',\r\n\t\t\t\t\t\t\t\t\t\t'groups' => [ 'Posts', 'Comments', 'Session' ],\r\n\t\t\t\t\t\t\t\t\t\t'prevent_clear' => [ 'Session' ] ]\r\n\t\t\t\t]\r\n\t\t\t];\r\n\t\t\t\r\n \tCache::init($config);\r\n```\r\n\r\n\r\n```php\r\n\t// Através da inicialização do Cache\r\n \tuse ZLX\\Cache\\Cache;\r\n\t$config = [\t'engine' => 'CustomCacheEngine',\r\n\t\t\t\t'duration' => '+10 minutes',\r\n\t\t\t\t'groups' => [ 'Posts', 'Comments', 'Session' ],\r\n\t\t\t\t'prevent_clear' => [ 'Session' ] \r\n\t\t\t];\r\n\t\t\t\r\n \tCache::create('meu_cache', $config);\r\n```\r\n\r\nDesta forma, você pode criar engines que utilizam a lógica que for necessária implementada.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}